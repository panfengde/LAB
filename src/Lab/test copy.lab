(begin 
(define a 10000)
( 
(lambda (x) 
(+ a 10)
)
10
)
)


(begin
(define a 10)
(set a 11)
(set a 12)
(set a 13)
a
)


(begin 
(define a 10)
(set a 15)
a 
)

((lambda (x) (+ x 10)) 10)

(begin 
(set 100.temp.go "hello set") 
100.temp.go
)




(define a 10)
    (define-syntax += 
        (syntax-rules ()
            ((_ a b) (begin (set a (+ a b)) a))
            ((_ a b ...) (begin (set a (+ a b ...)) a))
        )
    )
    (+= a 20 30 (+= a 20 30 40))
    (begin 
    (set 100.temp.go "hello set") 
    100.temp.go
    )

(begin 
    (define (a x) (+ x 100)) 
    (define (b x) (+ x 100)) 
    (a 400)
)

(begin     
    (define one (lambda (x) (+ x x)))
    (one 10)
)

(begin 
    (class animal 
        (constructor (color_1  wheel_1) 
            (set (get this "color") color_1)
            (set (get this "wheel") wheel_1)
        ) 
        (define (a x) (+ x 100))
        (define (b x) (+ x 100))
    )
    (define one (new animal "aaa" 11111))
    (get one "color")
)


(begin 
    (class animal 
        (constructor (color_1  wheel_1) 
            (set (get this "color") color_1)
            (set (get this "wheel") wheel_1)
        ) 
        (define (a x) (+ x 100))
        (define (b x) (+ x 100))
    )
    
    (define one (new animal "aaa" 11111))
)


(begin 
    (class people 
        (constructor (color  wheel) 
            (define colora color)
            (define wheela wheel)
        ) 
        (define (a x) (+ this.wheela 100))
        (define (b x) (+ x 100))
    )
    (define one (new people "aaa" 900))
    
    (one.a 10)
)


(begin 
    (define-syntax when 
        (syntax-rules ()
        ((_ pred b1 ...)
            (if pred (begin b1 ...)))))

    (when 10 (+ 1 1) (+ 1 1) (+ 1 1) (+ 1 5))
)


(begin 
    (define-syntax let  
            (syntax-rules () 
                (
                   (_ ((arg1 rag1Value) ) body )  
                            ( (lambda ( arg1 ) body) rag1Value ) 
                )
                (
                    (_ ( (arg1 rag1Value) ... ) body )  
                            (let (...) ( (lambda (arg1) body ) rag1Value ) ) 
                )
            )
    )

(let 
    (
        (a 1)
        (b 19)
        (c 19)
        (d 19)
        (e 19)
        (f 19)
    )
    (+ a b c d e f)
)
)
